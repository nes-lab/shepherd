---
# note: best to be started with "-v" to get stdout
# Strengthen Security for Beaglebone Ubuntu
# become: true
# TODO: (maybe) remove avahi in managed network

- name: SYS - Remove default User "ubuntu"
  ansible.builtin.user:
    name: ubuntu
    remove: true
    state: absent

- name: CFG - Improve SSHd-Security
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
    state: present
  loop:
    - {regex: '^.*Protocol.*$', line: 'Protocol 2'}
    - {regex: '^.*StrictModes.*$', line: 'StrictModes yes'}
    - {regex: '^.*LoginGraceTime.*$', line: 'LoginGraceTime 1m'}
    - {regex: '^.*MaxAuthTries.*$', line: 'MaxAuthTries 3'}
    - {regex: '^.*PermitRootLogin.*$', line: 'PermitRootLogin no'}
    - {regex: '^.*PasswordAuthentication.*$', line: 'PasswordAuthentication no'} # disable for debug
    - {regex: '^.*PermitEmptyPasswords.*$', line: 'PermitEmptyPasswords no'}
    - {regex: '^.*UsePAM.*$', line: 'UsePAM yes'}
    - {regex: '^.*PubkeyAuthentication.*$', line: 'PubkeyAuthentication yes'}
    - {regex: '^.*AuthorizedKeysFile.*$', line: 'AuthorizedKeysFile .ssh/authorized_keys'}
    - {regex: '^.*RhostsRSAAuthentication.*$', line: 'RhostsRSAAuthentication no'}
    - {regex: '^.*ChallengeResponseAuthentication.*$', line: 'ChallengeResponseAuthentication no'}
    - {regex: '^.*X11Forwarding.*$', line: 'X11Forwarding no'}
    - {regex: '^.*AllowUsers.*$', line: 'AllowUsers {{ ansible_user }}'}
    # select good AND exclude weak algorithms:
    - {regex: '^.*KexAlgorithms.*$', line: 'KexAlgorithms -ecdh-sha2*,diffie-hellman-group-exchange*,diffie-hellman-group14-sha1'}
    - {regex: '^.*HostKeyAlgorithms.*$', line: 'HostKeyAlgorithms -ecda-sha2*,ecdsa-sha2*'}
    - {regex: '^.*Ciphers.*$', line: 'Ciphers chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr'}
    - {regex: '^.*MACs.*$', line: 'MACs -umac-64*,hmac-sha1*,hmac-sha2-256,hmac-sha2-512,umac-128@open*'}
  # TODO: x11Forwarding is twice in file, one yes and one no

- name: CFG - Install custom SSHd-Banner for Login
  ansible.builtin.copy:
    src: 'sshd_banner.text'
    dest: '/etc/issue.net'
    force: true
    mode: '0644'

- name: INIT - Check if "message of the day" exists
  ansible.builtin.stat:
    path: /etc/default/motd-news
  register: motd_result

- name: CFG - Disable "message of the day"-Service (motd)
  ansible.builtin.lineinfile:
    dest: /etc/default/motd-news
    regexp: '^.*ENABLED.*$'
    line: 'ENABLED=0'
    state: present
  when: motd_result.stat.exists

- name: CFG - Disable motd-news.timer
  ansible.builtin.systemd:
    name: 'motd-news.timer'
    masked: true
    state: stopped
    enabled: false
  changed_when: true

- name: CFG - Disable Terminal over Serial -> Services
  ansible.builtin.systemd:
    name: '{{ item }}'
    masked: true
    state: stopped
    enabled: false
  loop:
    - serial-getty@ttyGS0.service
    - serial-getty@ttyS0.service
    - getty@tty1.service
  changed_when: true
  # change active ones with: sudo systemctl list-units

- name: CFG - Disable Terminal over Serial -> Grub
  ansible.builtin.replace:
    dest: /etc/default/grub
    regexp: '^console=ttyO0,115200n8\s$'
    replace: ''
  failed_when: false # not existing in latest nightlies

- name: CFG - Disable Terminal over Serial -> uBoot
  ansible.builtin.replace:
    dest: /boot/uEnv.txt
    regexp: '^console='
    replace: '#console='

# TODO: part 3 needed, terminal still active
# TODO: uEnv has UART enabled

- name: SYS - Find and disable world-writables
  ansible.builtin.shell:
    cmd: 'find / -xdev -perm +o=w ! \( -type d -perm +o=t \) ! -type l -ok chmod -v o-w {} \;'
  changed_when: true

- name: SYS - Prevent active User from creating new world writables
  ansible.builtin.shell:
    cmd: 'umask 002 && umask'
  changed_when: true

- name: Restart device
  ansible.builtin.reboot:
    connect_timeout: 20
    reboot_timeout: 200

- name: INFO - check for port-listeners (look for open ports beside of SSHd)
  ansible.builtin.shell: |  # pipefail-setting prevents surprises
    set -o pipefail && netstat -apn | grep LISTEN
  changed_when: false
  register: netstat

- name: INFO - print listeners
  ansible.builtin.debug:
    msg: "{{ netstat.stdout }}"
