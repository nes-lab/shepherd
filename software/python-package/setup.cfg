[metadata]
name = shepherd
version = attr: shepherd.__version__
author = Kai Geissdoerfer, Ingmar Splitt
author_email = kai.geissdoerfer@tu-dresden.de
maintainer_email = ingmar.splitt@tu-dresden.de
license = MIT
url = testbed.nes-lab.org
project_urls =
    Tracker = https://github.com/orgua/shepherd/issues
    Source = https://github.com/orgua/shepherd
description = Synchronized Energy Harvesting Emulator and Recorder
keywords = testbed, beaglebone, pru, batteryless, energyharvesting, solar
platforms = unix, linux
classifiers =
    # How mature is this project? Common values are
    #   4 - Beta
    #   5 - Production/Stable
    Development Status :: 5 - Production/Stable
    Intended Audience :: Developers
    Intended Audience :: Information Technology
    Intended Audience :: Science/Research
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Natural Language :: English

[options]
packages = find:
package_dir =
    =.
zip_safe = True
include_package_data = True
python_requires = >= 3.8
install_requires =
    shepherd-core
    click>=8.1.3
    click-config-file
    numpy
    python-periphery<2.0.0
    zerorpc
    invoke
    h5py
    psutil
    pyserial
    pyYAML>=6.0.0
    msgpack
    msgpack-numpy
    gevent
    scipy
    chromalog
    # force-update some plugins (june23)

[options.extras_require]
dev =
    black
    pylint
    flake8
    twine
    pre-commit
    pyright

test =
    pytest
    pyfakefs
    pytest-timeout
    pytest-click
    coverage
doc =
    dbus-python
# TODO doc should trigger on
# We are installing the DBUS module to build the docs, but the C libraries
# required to build dbus aren't available on RTD, so we need to exclude it
# from the installed dependencies here, and mock it for import in docs/conf.py
# using the autodoc_mock_imports parameter:
#if not os.getenv("READTHEDOCS"):
#    requirements.append("dbus-python")


[options.entry_points]
console_scripts =
    shepherd-sheep = shepherd.cli:cli

[options.packages.find]
where=.

[options.package_data]
* = *.yaml


[aliases]
test=pytest

[tool:pytest]
markers =
    hardware: test requires specific hardware, i.e. needs to run on BBone.
    fake_hardware: test on simulated hardware (gets activated automatically when not on BBone)
    eeprom_write: test requires writing of EEPROM (add opt --eeprom-write)
    src_name: name of virtual source settings (yaml-file or config-entry)
    timeout: limit for individual test to finish
# opts: summary for all except passed, verbose result for each tests
addopts = -vvv
