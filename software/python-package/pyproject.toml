[project]
name = "shepherd_sheep"
description = "Synchronized Energy Harvesting Emulator and Recorder"
keywords = ["testbed", "beaglebone", "pru", "batteryless", "energyharvesting", "solar"]

authors = [
    {name = "Kai Geissdoerfer", email = "kai.geissdoerfer@tu-dresden.de"},
    {name = "Ingmar Splitt", email = "ingmar.splitt@tu-dresden.de"},
]
maintainers = [{name = "Ingmar Splitt", email = "ingmar.splitt@tu-dresden.de"}]

license = {text = "MIT"}
dynamic = ["version"]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Natural Language :: English",
]

requires-python = ">= 3.10"
dependencies = [
    "shepherd-core[elf,inventory]>=2024.7.1",
    "click>=8.1.3",
    "numpy",
    "python-periphery<2.0.0",
    "zerorpc",
    "invoke",
    "h5py",
    "psutil",
    "pyserial",
    "pyYAML>=6.0.0",
    "msgpack",
    "msgpack-numpy",
    "gevent",
    "chromalog",
    "pydantic>2.0.0",
    # force-update some plugins (june23)
]

[project.optional-dependencies]
dev = [
    "twine",
    "pre-commit",
    "pyright",
    "types-PyYAML",
    "ruff",
]
test = [
    "pytest>7.4.0",
    "pyfakefs>5.0.0",
    "pytest-timeout",
    "pytest-click",
    "coverage",
]
doc = ["dbus-python"]
# TODO doc should trigger on
# We are installing the DBUS module to build the docs, but the C libraries
# required to build dbus aren't available on RTD, so we need to exclude it
# from the installed dependencies here, and mock it for import in docs/conf.py
# using the autodoc_mock_imports parameter:
# if not os.getenv("READTHEDOCS"):
# requirements.append("dbus-python")

[project.urls]
Homepage = "https://shepherd.cfaed.tu-dresden.de"
Documentation = "https://orgua.github.io/shepherd"
Issues = "https://github.com/orgua/shepherd/issues"
Source = "https://github.com/orgua/shepherd"

[project.scripts]
shepherd = "shepherd_sheep.cli:cli" # short form
shepherd-sheep = "shepherd_sheep.cli:cli"
shepherd-launcher = "shepherd_launcher:main"
shepherd-watchdog = "shepherd_watchdog:main"

[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
platforms = ["unix", "linux"]
package-dir = {"" = "."}
zip-safe = true
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
namespaces = false

[tool.setuptools.package-data]
"*" = ["*.yaml"]

[tool.setuptools.dynamic]
version = {attr = "shepherd_sheep.__version__"}

[tool.aliases]
test = "pytest"

[tool.pytest.ini_options]
markers = [
    "hardware: test requires specific hardware, i.e. needs to run on BBone.",
    "mock_hardware: test on simulated hardware (gets activated automatically when not on BBone)",
    "eeprom_write: test requires writing of EEPROM (add opt --eeprom-write)",
    "src_name: name of virtual source settings (yaml-file or config-entry)",
    "timeout: limit for individual test to finish",
]
# opts: summary for all except passed, verbose result for each tests
addopts = "-vvv --stepwise"
# continue after fail: sudo pytest-3 --stepwise

[tool.coverage.run]
source = ["shepherd_sheep"]

[tool.pyright]
root = "./"
include = ['./shepherd', ]
pythonVersion = "3.10"
pythonPlatform = "Linux"
reportMissingParameterType = true
